<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Authorizer.DotNet</name>
    </assembly>
    <members>
        <member name="T:Authorizer.DotNet.AuthorizerClient">
            <summary>
            Client for interacting with the Authorizer.dev authentication service.
            </summary>
        </member>
        <member name="M:Authorizer.DotNet.AuthorizerClient.#ctor(Authorizer.DotNet.Internal.AuthorizerHttpClient,Microsoft.Extensions.Options.IOptions{Authorizer.DotNet.Options.AuthorizerOptions},Microsoft.Extensions.Logging.ILogger{Authorizer.DotNet.AuthorizerClient})">
            <summary>
            Initializes a new instance of the AuthorizerClient class.
            </summary>
            <param name="httpClient">The internal HTTP client for API communication.</param>
            <param name="options">Configuration options for the client.</param>
            <param name="logger">Logger instance for diagnostic information.</param>
        </member>
        <member name="M:Authorizer.DotNet.AuthorizerClient.LoginAsync(Authorizer.DotNet.Models.Requests.LoginRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Authorizer.DotNet.AuthorizerClient.SignupAsync(Authorizer.DotNet.Models.Requests.SignupRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Authorizer.DotNet.AuthorizerClient.AuthorizeAsync(Authorizer.DotNet.Models.Requests.AuthorizeRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Authorizer.DotNet.AuthorizerClient.GetTokenAsync(Authorizer.DotNet.Models.Requests.GetTokenRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Authorizer.DotNet.AuthorizerClient.GetProfileAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Authorizer.DotNet.AuthorizerClient.GetSessionAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Authorizer.DotNet.AuthorizerClient.LogoutAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Authorizer.DotNet.AuthorizerClient.VerifyEmailAsync(Authorizer.DotNet.Models.Requests.VerifyEmailRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Authorizer.DotNet.AuthorizerClient.ValidateJwtAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Authorizer.DotNet.AuthorizerClient.ForgotPasswordAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Authorizer.DotNet.AuthorizerClient.ResetPasswordAsync(Authorizer.DotNet.Models.Requests.ResetPasswordRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Authorizer.DotNet.AuthorizerClient.ChangePasswordAsync(Authorizer.DotNet.Models.Requests.ChangePasswordRequest,System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:Authorizer.DotNet.AuthorizerClient.GetMetaAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="T:Authorizer.DotNet.Exceptions.AuthorizerException">
            <summary>
            Exception thrown when an Authorizer.dev API operation fails.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Exceptions.AuthorizerException.StatusCode">
            <summary>
            HTTP status code from the API response.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Exceptions.AuthorizerException.Errors">
            <summary>
            List of errors returned by the API.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Exceptions.AuthorizerException.ResponseContent">
            <summary>
            Raw response content from the API.
            </summary>
        </member>
        <member name="M:Authorizer.DotNet.Exceptions.AuthorizerException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the AuthorizerException class.
            </summary>
            <param name="message">The error message.</param>
        </member>
        <member name="M:Authorizer.DotNet.Exceptions.AuthorizerException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the AuthorizerException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="innerException">The inner exception.</param>
        </member>
        <member name="M:Authorizer.DotNet.Exceptions.AuthorizerException.#ctor(System.String,System.Net.HttpStatusCode,System.String)">
            <summary>
            Initializes a new instance of the AuthorizerException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="statusCode">HTTP status code from the API response.</param>
            <param name="responseContent">Raw response content from the API.</param>
        </member>
        <member name="M:Authorizer.DotNet.Exceptions.AuthorizerException.#ctor(System.String,System.Collections.Generic.IReadOnlyList{Authorizer.DotNet.Models.Common.AuthorizerError},System.Nullable{System.Net.HttpStatusCode},System.String)">
            <summary>
            Initializes a new instance of the AuthorizerException class.
            </summary>
            <param name="message">The error message.</param>
            <param name="errors">List of errors returned by the API.</param>
            <param name="statusCode">HTTP status code from the API response.</param>
            <param name="responseContent">Raw response content from the API.</param>
        </member>
        <member name="M:Authorizer.DotNet.Exceptions.AuthorizerException.FromErrors(System.Collections.Generic.IReadOnlyList{Authorizer.DotNet.Models.Common.AuthorizerError},System.Nullable{System.Net.HttpStatusCode},System.String)">
            <summary>
            Creates an AuthorizerException from a list of API errors.
            </summary>
            <param name="errors">List of errors returned by the API.</param>
            <param name="statusCode">HTTP status code from the API response.</param>
            <param name="responseContent">Raw response content from the API.</param>
            <returns>A new AuthorizerException instance.</returns>
        </member>
        <member name="M:Authorizer.DotNet.Exceptions.AuthorizerException.FromHttpResponse(System.Net.HttpStatusCode,System.String)">
            <summary>
            Creates an AuthorizerException from an HTTP response.
            </summary>
            <param name="statusCode">HTTP status code.</param>
            <param name="responseContent">Raw response content.</param>
            <returns>A new AuthorizerException instance.</returns>
        </member>
        <member name="T:Authorizer.DotNet.Extensions.ServiceCollectionExtensions">
            <summary>
            Extension methods for configuring Authorizer.dev services in dependency injection.
            </summary>
        </member>
        <member name="M:Authorizer.DotNet.Extensions.ServiceCollectionExtensions.AddAuthorizer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Authorizer.DotNet.Options.AuthorizerOptions})">
            <summary>
            Adds Authorizer.dev services to the service collection with configuration action.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <param name="configureOptions">Action to configure AuthorizerOptions.</param>
            <returns>The service collection for chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when services or configureOptions is null.</exception>
        </member>
        <member name="M:Authorizer.DotNet.Extensions.ServiceCollectionExtensions.AddAuthorizer(Microsoft.Extensions.DependencyInjection.IServiceCollection,Authorizer.DotNet.Options.AuthorizerOptions)">
            <summary>
            Adds Authorizer.dev services to the service collection with pre-configured options.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <param name="options">Pre-configured AuthorizerOptions instance.</param>
            <returns>The service collection for chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when services or options is null.</exception>
        </member>
        <member name="M:Authorizer.DotNet.Extensions.ServiceCollectionExtensions.AddAuthorizer(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.String)">
            <summary>
            Adds Authorizer.dev services to the service collection using configuration section.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <param name="configuration">The configuration instance.</param>
            <param name="sectionName">The configuration section name. Defaults to "Authorizer".</param>
            <returns>The service collection for chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when services or configuration is null.</exception>
        </member>
        <member name="M:Authorizer.DotNet.Extensions.ServiceCollectionExtensions.AddAuthorizer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Authorizer.DotNet.Options.AuthorizerOptions},System.Action{System.Net.Http.HttpClient})">
            <summary>
            Adds Authorizer.dev services to the service collection with advanced HTTP client configuration.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <param name="configureOptions">Action to configure AuthorizerOptions.</param>
            <param name="configureHttpClient">Action to configure the underlying HttpClient.</param>
            <returns>The service collection for chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when services or configureOptions is null.</exception>
        </member>
        <member name="M:Authorizer.DotNet.Extensions.ServiceCollectionExtensions.AddAuthorizer(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{Authorizer.DotNet.Options.AuthorizerOptions},System.Action{System.IServiceProvider,System.Net.Http.HttpClient})">
            <summary>
            Adds Authorizer.dev services to the service collection with advanced HTTP client configuration using IServiceProvider.
            </summary>
            <param name="services">The service collection to add services to.</param>
            <param name="configureOptions">Action to configure AuthorizerOptions.</param>
            <param name="configureHttpClient">Action to configure the underlying HttpClient with access to IServiceProvider.</param>
            <returns>The service collection for chaining.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown when services or configureOptions is null.</exception>
        </member>
        <member name="T:Authorizer.DotNet.IAuthorizerClient">
            <summary>
            Interface for the Authorizer.dev client providing authentication and user management functionality.
            </summary>
        </member>
        <member name="M:Authorizer.DotNet.IAuthorizerClient.LoginAsync(Authorizer.DotNet.Models.Requests.LoginRequest,System.Threading.CancellationToken)">
            <summary>
            Authenticates a user using email and password.
            </summary>
            <param name="request">The login request containing email and password.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>Login response containing access token and user information.</returns>
        </member>
        <member name="M:Authorizer.DotNet.IAuthorizerClient.SignupAsync(Authorizer.DotNet.Models.Requests.SignupRequest,System.Threading.CancellationToken)">
            <summary>
            Registers a new user account.
            </summary>
            <param name="request">The signup request containing user information.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>Signup response containing access token and user information.</returns>
        </member>
        <member name="M:Authorizer.DotNet.IAuthorizerClient.AuthorizeAsync(Authorizer.DotNet.Models.Requests.AuthorizeRequest,System.Threading.CancellationToken)">
            <summary>
            Initiates OAuth authorization flow.
            </summary>
            <param name="request">The authorization request with OAuth parameters.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>Authorization response with redirect URL or authorization code.</returns>
        </member>
        <member name="M:Authorizer.DotNet.IAuthorizerClient.GetTokenAsync(Authorizer.DotNet.Models.Requests.GetTokenRequest,System.Threading.CancellationToken)">
            <summary>
            Exchanges authorization code for access token.
            </summary>
            <param name="request">The token request containing authorization code.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>Token response containing access and refresh tokens.</returns>
        </member>
        <member name="M:Authorizer.DotNet.IAuthorizerClient.GetProfileAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves the current user's profile information.
            </summary>
            <param name="accessToken">Access token for authentication.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>User profile information.</returns>
        </member>
        <member name="M:Authorizer.DotNet.IAuthorizerClient.GetSessionAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Retrieves current session information.
            </summary>
            <param name="sessionToken">Optional session token. If null, uses cookie-based session.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>Session information including user and token details.</returns>
        </member>
        <member name="M:Authorizer.DotNet.IAuthorizerClient.LogoutAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Logs out the current user session.
            </summary>
            <param name="sessionToken">Optional session token. If null, uses cookie-based session.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>Success status of the logout operation.</returns>
        </member>
        <member name="M:Authorizer.DotNet.IAuthorizerClient.VerifyEmailAsync(Authorizer.DotNet.Models.Requests.VerifyEmailRequest,System.Threading.CancellationToken)">
            <summary>
            Verifies a user's email address using verification token.
            </summary>
            <param name="request">The email verification request.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>Success status of the email verification.</returns>
        </member>
        <member name="M:Authorizer.DotNet.IAuthorizerClient.ValidateJwtAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Validates a JWT token and returns user information.
            </summary>
            <param name="token">JWT token to validate.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>User profile information if token is valid.</returns>
        </member>
        <member name="M:Authorizer.DotNet.IAuthorizerClient.ForgotPasswordAsync(System.String,System.Threading.CancellationToken)">
            <summary>
            Initiates password reset flow by sending reset email.
            </summary>
            <param name="email">Email address to send password reset to.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>Success status of the password reset initiation.</returns>
        </member>
        <member name="M:Authorizer.DotNet.IAuthorizerClient.ResetPasswordAsync(Authorizer.DotNet.Models.Requests.ResetPasswordRequest,System.Threading.CancellationToken)">
            <summary>
            Resets user password using reset token.
            </summary>
            <param name="request">The password reset request containing token and new password.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>Success status of the password reset.</returns>
        </member>
        <member name="M:Authorizer.DotNet.IAuthorizerClient.ChangePasswordAsync(Authorizer.DotNet.Models.Requests.ChangePasswordRequest,System.Threading.CancellationToken)">
            <summary>
            Changes user password (requires current password).
            </summary>
            <param name="request">The password change request.</param>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>Success status of the password change.</returns>
        </member>
        <member name="M:Authorizer.DotNet.IAuthorizerClient.GetMetaAsync(System.Threading.CancellationToken)">
            <summary>
            Retrieves metadata information about the Authorizer instance.
            </summary>
            <param name="cancellationToken">Cancellation token for the operation.</param>
            <returns>Metadata information including supported features and configuration.</returns>
        </member>
        <member name="T:Authorizer.DotNet.Internal.AuthorizerHttpClient">
            <summary>
            Internal HTTP client wrapper for Authorizer.dev API communication.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Common.AuthorizerError">
            <summary>
            Represents an error returned by the Authorizer.dev API.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.AuthorizerError.Message">
            <summary>
            Error message describing what went wrong.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.AuthorizerError.Code">
            <summary>
            Error code identifying the type of error.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.AuthorizerError.Details">
            <summary>
            Additional details about the error.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.AuthorizerError.Path">
            <summary>
            Path in the GraphQL query where the error occurred.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.AuthorizerError.Extensions">
            <summary>
            Extensions containing additional error information.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Common.AuthRecipe">
            <summary>
            Authentication recipe types supported by Authorizer.dev.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Common.AuthRecipeConfig">
            <summary>
            Configuration for authentication recipes.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.AuthRecipeConfig.BasicAuthEnabled">
            <summary>
            Whether basic auth (email/password) is enabled.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.AuthRecipeConfig.MagicLinkLoginEnabled">
            <summary>
            Whether magic link login is enabled.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.AuthRecipeConfig.MobileOtpEnabled">
            <summary>
            Whether mobile OTP login is enabled.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.AuthRecipeConfig.SocialLoginEnabled">
            <summary>
            Whether social login is enabled.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.AuthRecipeConfig.SocialLoginProviders">
            <summary>
            List of enabled social login providers.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Common.User">
            <summary>
            Represents a user in the Authorizer.dev system.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.Id">
            <summary>
            Unique identifier for the user.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.Email">
            <summary>
            User's email address.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.EmailVerified">
            <summary>
            Whether the user's email has been verified.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.GivenName">
            <summary>
            User's given name (first name).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.FamilyName">
            <summary>
            User's family name (last name).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.MiddleName">
            <summary>
            User's middle name.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.Name">
            <summary>
            User's full name.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.Nickname">
            <summary>
            User's nickname or display name.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.PreferredUsername">
            <summary>
            User's preferred username.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.Picture">
            <summary>
            URL to the user's profile picture.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.Website">
            <summary>
            User's website URL.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.Gender">
            <summary>
            User's gender.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.Birthdate">
            <summary>
            User's birthdate.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.PhoneNumber">
            <summary>
            User's phone number.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.PhoneNumberVerified">
            <summary>
            Whether the user's phone number has been verified.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.CreatedAt">
            <summary>
            Timestamp when the user was created.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.UpdatedAt">
            <summary>
            Timestamp when the user was last updated.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.Roles">
            <summary>
            List of roles assigned to the user.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.AppData">
            <summary>
            Additional custom attributes for the user.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.IsActive">
            <summary>
            Whether the user account is active.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Common.User.SignupMethods">
            <summary>
            Reason for signup (if provided during registration).
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Requests.AuthorizeRequest">
            <summary>
            Request model for OAuth authorization.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.AuthorizeRequest.ResponseType">
            <summary>
            OAuth response type (typically "code" for authorization code flow).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.AuthorizeRequest.ClientId">
            <summary>
            OAuth client ID.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.AuthorizeRequest.RedirectUri">
            <summary>
            Redirect URI where the authorization response will be sent.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.AuthorizeRequest.Scope">
            <summary>
            OAuth scope for the authorization request.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.AuthorizeRequest.State">
            <summary>
            OAuth state parameter for CSRF protection.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.AuthorizeRequest.CodeChallenge">
            <summary>
            PKCE code challenge for enhanced security.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.AuthorizeRequest.CodeChallengeMethod">
            <summary>
            PKCE code challenge method (typically "S256").
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.AuthorizeRequest.Nonce">
            <summary>
            OAuth nonce for additional security.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.AuthorizeRequest.ResponseMode">
            <summary>
            OAuth response mode (query, fragment, form_post).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.AuthorizeRequest.Prompt">
            <summary>
            OAuth prompt parameter (none, login, consent, select_account).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.AuthorizeRequest.MaxAge">
            <summary>
            Maximum age of authentication in seconds.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.AuthorizeRequest.UiLocales">
            <summary>
            UI locales for the authorization request.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.AuthorizeRequest.LoginHint">
            <summary>
            Login hint (email or username) to pre-fill the login form.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Requests.ChangePasswordRequest">
            <summary>
            Request model for changing user password.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.ChangePasswordRequest.OldPassword">
            <summary>
            User's current password.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.ChangePasswordRequest.NewPassword">
            <summary>
            New password for the user.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.ChangePasswordRequest.ConfirmNewPassword">
            <summary>
            New password confirmation (must match new_password).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.ChangePasswordRequest.Token">
            <summary>
            Access token for authentication.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Requests.GetTokenRequest">
            <summary>
            Request model for OAuth token exchange.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.GetTokenRequest.GrantType">
            <summary>
            OAuth grant type (authorization_code, refresh_token, client_credentials).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.GetTokenRequest.Code">
            <summary>
            Authorization code from the authorize endpoint (required for authorization_code grant).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.GetTokenRequest.CodeVerifier">
            <summary>
            PKCE code verifier for enhanced security.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.GetTokenRequest.RefreshToken">
            <summary>
            Refresh token (required for refresh_token grant).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.GetTokenRequest.ClientId">
            <summary>
            OAuth client ID.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.GetTokenRequest.ClientSecret">
            <summary>
            OAuth client secret (for confidential clients).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.GetTokenRequest.RedirectUri">
            <summary>
            Redirect URI that was used in the authorization request.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.GetTokenRequest.Scope">
            <summary>
            OAuth scope for the token request.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.GetTokenRequest.Username">
            <summary>
            Username (for password grant type).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.GetTokenRequest.Password">
            <summary>
            Password (for password grant type).
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Requests.LoginRequest">
            <summary>
            Request model for user login.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.LoginRequest.Email">
            <summary>
            User's email address.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.LoginRequest.Password">
            <summary>
            User's password.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.LoginRequest.Scope">
            <summary>
            OAuth scope for the login request.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.LoginRequest.State">
            <summary>
            OAuth state parameter for CSRF protection.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.LoginRequest.Roles">
            <summary>
            Roles to assign to the user session.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.LoginRequest.IsRememberMe">
            <summary>
            Whether to remember the login session.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Requests.ResetPasswordRequest">
            <summary>
            Request model for password reset.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.ResetPasswordRequest.Token">
            <summary>
            Password reset token received via email.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.ResetPasswordRequest.Password">
            <summary>
            New password for the user.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.ResetPasswordRequest.ConfirmPassword">
            <summary>
            Password confirmation (must match password).
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Requests.SignupRequest">
            <summary>
            Request model for user registration.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.Email">
            <summary>
            User's email address.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.Password">
            <summary>
            User's password.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.ConfirmPassword">
            <summary>
            Password confirmation (must match password).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.GivenName">
            <summary>
            User's given name (first name).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.FamilyName">
            <summary>
            User's family name (last name).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.MiddleName">
            <summary>
            User's middle name.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.Nickname">
            <summary>
            User's nickname or display name.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.PreferredUsername">
            <summary>
            User's preferred username.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.PhoneNumber">
            <summary>
            User's phone number.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.Picture">
            <summary>
            User's profile picture URL.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.Birthdate">
            <summary>
            User's birthdate.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.Gender">
            <summary>
            User's gender.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.Scope">
            <summary>
            OAuth scope for the signup request.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.State">
            <summary>
            OAuth state parameter for CSRF protection.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.Roles">
            <summary>
            Roles to assign to the new user.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.AppData">
            <summary>
            Additional app-specific data for the user.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.SignupRequest.RedirectUri">
            <summary>
            Redirect URL after successful signup.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Requests.ValidateJwtRequest">
            <summary>
            Request model for JWT token validation.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.ValidateJwtRequest.Token">
            <summary>
            JWT token to validate.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.ValidateJwtRequest.TokenType">
            <summary>
            Token type (typically "Bearer").
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Requests.VerifyEmailRequest">
            <summary>
            Request model for email verification.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.VerifyEmailRequest.Token">
            <summary>
            Email verification token received via email.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Requests.VerifyEmailRequest.Email">
            <summary>
            Email address being verified.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Responses.AuthorizeResponse">
            <summary>
            Response from the OAuth authorize endpoint.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.AuthorizeResponse.Code">
            <summary>
            Authorization code for token exchange.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.AuthorizeResponse.State">
            <summary>
            OAuth state parameter.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.AuthorizeResponse.RedirectUri">
            <summary>
            Redirect URL where the user should be sent.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.AuthorizeResponse.Error">
            <summary>
            Error code if authorization failed.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.AuthorizeResponse.ErrorDescription">
            <summary>
            Error description if authorization failed.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.AuthorizeResponse.ErrorUri">
            <summary>
            Error URI with more information about the error.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Responses.AuthorizerResponse`1">
            <summary>
            Generic wrapper for all Authorizer.dev API responses.
            </summary>
            <typeparam name="T">The type of data contained in the response.</typeparam>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.AuthorizerResponse`1.Data">
            <summary>
            The response data if the request was successful.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.AuthorizerResponse`1.Errors">
            <summary>
            List of errors if the request failed.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.AuthorizerResponse`1.IsSuccess">
            <summary>
            Indicates whether the request was successful (no errors).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.AuthorizerResponse`1.HasErrors">
            <summary>
            Indicates whether the request has errors.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.AuthorizerResponse`1.FirstErrorMessage">
            <summary>
            Gets the first error message if any errors exist.
            </summary>
        </member>
        <member name="M:Authorizer.DotNet.Models.Responses.AuthorizerResponse`1.Success(`0)">
            <summary>
            Creates a successful response with data.
            </summary>
            <param name="data">The successful response data.</param>
            <returns>A successful AuthorizerResponse.</returns>
        </member>
        <member name="M:Authorizer.DotNet.Models.Responses.AuthorizerResponse`1.Failure(System.Collections.Generic.IReadOnlyList{Authorizer.DotNet.Models.Common.AuthorizerError})">
            <summary>
            Creates a failed response with errors.
            </summary>
            <param name="errors">The errors that occurred.</param>
            <returns>A failed AuthorizerResponse.</returns>
        </member>
        <member name="M:Authorizer.DotNet.Models.Responses.AuthorizerResponse`1.Failure(Authorizer.DotNet.Models.Common.AuthorizerError)">
            <summary>
            Creates a failed response with a single error.
            </summary>
            <param name="error">The error that occurred.</param>
            <returns>A failed AuthorizerResponse.</returns>
        </member>
        <member name="M:Authorizer.DotNet.Models.Responses.AuthorizerResponse`1.Failure(System.String,System.String)">
            <summary>
            Creates a failed response with an error message.
            </summary>
            <param name="message">The error message.</param>
            <param name="code">Optional error code.</param>
            <returns>A failed AuthorizerResponse.</returns>
        </member>
        <member name="T:Authorizer.DotNet.Models.Responses.LoginResponse">
            <summary>
            Response from the login API endpoint.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.LoginResponse.AccessToken">
            <summary>
            JWT access token for API authentication.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.LoginResponse.RefreshToken">
            <summary>
            Refresh token for obtaining new access tokens.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.LoginResponse.IdToken">
            <summary>
            ID token containing user claims.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.LoginResponse.TokenType">
            <summary>
            Token type (typically "Bearer").
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.LoginResponse.ExpiresIn">
            <summary>
            Access token expiration time in seconds.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.LoginResponse.User">
            <summary>
            User information returned with the login response.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.LoginResponse.Scope">
            <summary>
            OAuth scope granted to the access token.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.LoginResponse.State">
            <summary>
            OAuth state parameter.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.LoginResponse.CreatedAt">
            <summary>
            Timestamp when the tokens were issued.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.LoginResponse.ShouldShowEmailOtpScreen">
            <summary>
            Whether the login should be remembered (for persistent sessions).
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.LoginResponse.ShouldShowMobileOtpScreen">
            <summary>
            Whether MFA is required for this login.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.LoginResponse.SessionToken">
            <summary>
            Session token for cookie-based authentication.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Responses.MetaInfo">
            <summary>
            Metadata information about the Authorizer instance.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.Version">
            <summary>
            Version of the Authorizer instance.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.ClientId">
            <summary>
            Client ID for OAuth flows.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.IsSignupEnabled">
            <summary>
            Whether signup is enabled.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.IsEmailVerificationEnabled">
            <summary>
            Whether email verification is required.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.IsBasicAuthenticationEnabled">
            <summary>
            Whether basic authentication is enabled.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.IsMagicLinkLoginEnabled">
            <summary>
            Whether magic link login is enabled.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.IsMobileOtpEnabled">
            <summary>
            Whether mobile OTP is enabled.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.IsSocialLoginEnabled">
            <summary>
            Whether social login is enabled.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.SocialLoginProviders">
            <summary>
            List of enabled social login providers.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.IsStrongPasswordEnabled">
            <summary>
            Whether strong password policy is enforced.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.AuthRecipeConfig">
            <summary>
            Configuration for authentication recipes.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.Roles">
            <summary>
            List of available roles.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.DefaultRoles">
            <summary>
            Default roles assigned to new users.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.ProtectedRoutes">
            <summary>
            Protected routes that require authentication.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.UnprotectedRoutes">
            <summary>
            Unprotected routes that don't require authentication.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.LogoutUrl">
            <summary>
            Optional logout URL.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.MetaInfo.IsMultiFactorAuthEnabled">
            <summary>
            Whether multi-factor authentication is enabled.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Responses.SessionInfo">
            <summary>
            Session information response.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SessionInfo.AccessToken">
            <summary>
            JWT access token for the session.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SessionInfo.RefreshToken">
            <summary>
            Refresh token for the session.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SessionInfo.IdToken">
            <summary>
            ID token for the session.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SessionInfo.User">
            <summary>
            User information for the session.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SessionInfo.ExpiresAt">
            <summary>
            Session expiration timestamp.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SessionInfo.CreatedAt">
            <summary>
            When the session was created.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SessionInfo.SessionToken">
            <summary>
            Session token for cookie-based authentication.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SessionInfo.IsValid">
            <summary>
            Whether the session is still valid.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Responses.SignupResponse">
            <summary>
            Response from the signup API endpoint.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SignupResponse.AccessToken">
            <summary>
            JWT access token for API authentication.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SignupResponse.RefreshToken">
            <summary>
            Refresh token for obtaining new access tokens.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SignupResponse.IdToken">
            <summary>
            ID token containing user claims.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SignupResponse.TokenType">
            <summary>
            Token type (typically "Bearer").
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SignupResponse.ExpiresIn">
            <summary>
            Access token expiration time in seconds.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SignupResponse.User">
            <summary>
            User information for the newly created account.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SignupResponse.Scope">
            <summary>
            OAuth scope granted to the access token.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SignupResponse.State">
            <summary>
            OAuth state parameter.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SignupResponse.CreatedAt">
            <summary>
            Timestamp when the tokens were issued.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SignupResponse.Message">
            <summary>
            Message about email verification if required.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SignupResponse.ShouldShowEmailOtpScreen">
            <summary>
            Whether email verification is required.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.SignupResponse.SessionToken">
            <summary>
            Session token for cookie-based authentication.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Responses.TokenResponse">
            <summary>
            Response from the OAuth token endpoint.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.TokenResponse.AccessToken">
            <summary>
            JWT access token for API authentication.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.TokenResponse.RefreshToken">
            <summary>
            Refresh token for obtaining new access tokens.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.TokenResponse.IdToken">
            <summary>
            ID token containing user claims.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.TokenResponse.TokenType">
            <summary>
            Token type (typically "Bearer").
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.TokenResponse.ExpiresIn">
            <summary>
            Access token expiration time in seconds.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.TokenResponse.Scope">
            <summary>
            OAuth scope granted to the access token.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.TokenResponse.State">
            <summary>
            OAuth state parameter.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.TokenResponse.CreatedAt">
            <summary>
            Timestamp when the tokens were issued.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Models.Responses.UserProfile">
            <summary>
            User profile information response.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.UserProfile.HasMobileOtp">
            <summary>
            Whether the user has multi-factor authentication enabled.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.UserProfile.BackupCodes">
            <summary>
            User's backup codes for account recovery.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Models.Responses.UserProfile.AuthenticatorDevices">
            <summary>
            User's enrolled authenticator devices.
            </summary>
        </member>
        <member name="T:Authorizer.DotNet.Options.AuthorizerOptions">
            <summary>
            Configuration options for the Authorizer.dev client.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Options.AuthorizerOptions.AuthorizerUrl">
            <summary>
            The base URL of your Authorizer.dev instance.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Options.AuthorizerOptions.RedirectUrl">
            <summary>
            The redirect URL for OAuth flows.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Options.AuthorizerOptions.ClientId">
            <summary>
            Optional client ID for OAuth flows.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Options.AuthorizerOptions.HttpTimeout">
            <summary>
            HTTP timeout for API requests. Default is 30 seconds.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Options.AuthorizerOptions.ApiKey">
            <summary>
            Optional API key for server-to-server authentication.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Options.AuthorizerOptions.ExtraHeaders">
            <summary>
            Additional headers to include with all requests.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Options.AuthorizerOptions.UseSecureCookies">
            <summary>
            Whether to use secure cookies. Default is true.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Options.AuthorizerOptions.CookieDomain">
            <summary>
            Cookie domain for session management.
            </summary>
        </member>
        <member name="P:Authorizer.DotNet.Options.AuthorizerOptions.DisableBrowserHistory">
            <summary>
            Whether to disable browser history for OAuth flows. Default is false.
            </summary>
        </member>
    </members>
</doc>
