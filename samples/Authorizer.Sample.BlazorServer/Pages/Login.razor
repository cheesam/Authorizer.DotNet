@page "/login"
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Login</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header">
                    <h4>Login</h4>
                </div>
                <div class="card-body">
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="alert alert-danger" role="alert">
                            @errorMessage
                        </div>
                    }

                    <EditForm Model="@loginModel" OnValidSubmit="@HandleLoginAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary class="text-danger" />

                        <div class="mb-3">
                            <label for="email" class="form-label">Email</label>
                            <InputText id="email" class="form-control" @bind-Value="loginModel.Email" />
                            <ValidationMessage For="@(() => loginModel.Email)" class="text-danger" />
                        </div>

                        <div class="mb-3">
                            <label for="password" class="form-label">Password</label>
                            <InputText id="password" type="password" class="form-control" @bind-Value="loginModel.Password" />
                            <ValidationMessage For="@(() => loginModel.Password)" class="text-danger" />
                        </div>

                        <div class="mb-3 form-check">
                            <InputCheckbox id="rememberMe" class="form-check-input" @bind-Value="loginModel.RememberMe" />
                            <label class="form-check-label" for="rememberMe">
                                Remember me
                            </label>
                        </div>

                        <div class="d-grid">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm" role="status"></span>
                                    <span>Logging in...</span>
                                }
                                else
                                {
                                    <span>Login</span>
                                }
                            </button>
                        </div>
                    </EditForm>

                    <div class="text-center mt-3">
                        <p>Don't have an account? <a href="/signup">Sign up</a></p>
                        <p><a href="/forgot-password">Forgot your password?</a></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new();
    private string? errorMessage;
    private bool isLoading;

    protected override async Task OnInitializedAsync()
    {
        if (AuthService.IsAuthenticated())
        {
            Navigation.NavigateTo("/");
        }
    }

    private async Task HandleLoginAsync()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            var (success, error) = await AuthService.LoginAsync(
                loginModel.Email, 
                loginModel.Password, 
                loginModel.RememberMe);

            if (success)
            {
                Navigation.NavigateTo("/");
            }
            else
            {
                errorMessage = error;
            }
        }
        finally
        {
            isLoading = false;
        }
    }

    public class LoginModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = string.Empty;

        [Required]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}